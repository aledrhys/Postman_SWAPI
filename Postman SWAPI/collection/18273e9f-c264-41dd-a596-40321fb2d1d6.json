{"info":{"_postman_id":"18273e9f-c264-41dd-a596-40321fb2d1d6","name":"SWAPI Tests","schema":"https://schema.getpostman.com/json/collection/v2.1.0/collection.json"},"item":[{"name":"WookieRendererForPlanets","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 200\", () => {\r","    pm.response.to.have.status(200);\r","});\r","\r","const response = pm.response.json();\r","\r","console.log(response.whrascwo);\r","console.log(response['whrascwo']);\r","\r","pm.test(\"Confirm Name value rendered in Wookie\", () => {\r","    pm.expect(response.whrascwo).to.eql(\"Traaoooooahwhwo\");\r","});"],"type":"text/javascript","id":"21c819f8-c85e-476f-816b-60ee1a43857f"}}],"id":"efa47afe-abd6-4b21-9ec6-6186e9392f1e","protocolProfileBehavior":{"disableBodyPruning":true},"request":{"method":"GET","header":[],"url":{"raw":"{{swapiUrl}}/planets/1/?format=wookiee","host":["{{swapiUrl}}"],"path":["planets","1",""],"query":[{"key":"format","value":"wookiee"}]}},"response":[]},{"name":"allVehicles","event":[{"listen":"test","script":{"exec":["pm.test(\"Test One - Confirm Status code is 200\", () => {\r","    pm.response.to.have.status(200);\r","});\r","\r","const response = pm.response.json();\r","\r","pm.test(\"Test Two - Body contains string where expected\",() => {\r","  pm.expect(pm.response.text()).to.include(\"manufacturer\");\r","  pm.expect(pm.response.text()).to.include(\"vehicle_class\");\r","});\r","\r","pm.test(\"Test Three - Results returned in acceptable times\", () => {\r","    pm.expect(pm.response.responseTime).to.be.below(200);\r","});\r","\r","pm.test(\"Test Four - Check Vehicles exist and at least one record is available\",() => {\r","    var jsonData = pm.response.json();\r","    pm.expect(jsonData.count).to.be.above(0);\r","});\r","\r",""],"type":"text/javascript","id":"35374f0f-6bf4-48c5-accd-1298fc7a488d"}}],"id":"b8cdfbbd-f986-4db1-9fe6-9a3a6bbb574b","protocolProfileBehavior":{"disableBodyPruning":true},"request":{"method":"GET","header":[],"url":{"raw":"{{swapiUrl}}/vehicles/","host":["{{swapiUrl}}"],"path":["vehicles",""]}},"response":[]},{"name":"singleVehicle","event":[{"listen":"test","script":{"exec":["// Confirm get 200\r","pm.test(\"Test One - Confirm Status code is 200\", () => {\r","    pm.response.to.have.status(200);\r","});\r","\r","// Confirm response valid\r","pm.test(\"Test Two - response must be valid and have a body\",  () => {\r","     pm.response.to.be.ok;\r","     pm.response.to.be.withBody;\r","     pm.response.to.be.json;\r","});\r","\r","const response = pm.response.json();\r","\r","pm.test(\"Test Three - Body contains string where expected\",() => {\r","  pm.expect(pm.response.text()).to.include(\"manufacturer\");\r","  pm.expect(pm.response.text()).to.include(\"vehicle_class\");\r","});\r","\r","// Check the properties of the response\r","pm.test(\"Test Four - The response has all properties\", () => {\r","    //parse the response json and test three properties\r","\r","    pm.expect(response.name).to.be.a('string');\r","    pm.expect(response.crew).to.have.lengthOf(2);\r","    pm.expect(response.films).to.be.an(\"array\");\r","    pm.expect(response.pilots).to.be.an(\"array\");\r","});\r","\r","// Check for specific values in the Object for this ID\r","pm.test(\"Test Five - Check for specific values in the Object for this ID\", () => {\r","  const expectedObject = {\r","    \"vehicle_class\": \"wheeled\",\r","    \"consumables\": \"2 months\",\r","  };\r","  pm.expect(pm.response.json()).to.deep.include(expectedObject);\r","});\r"," \r",""],"type":"text/javascript","id":"57db7d34-8a1c-4a9c-ad3b-bc140a291a4c"}}],"id":"a6dbee07-9986-4b2b-9228-c6ec4c5f0244","protocolProfileBehavior":{"disableBodyPruning":true},"request":{"method":"GET","header":[],"body":{"mode":"raw","raw":"","options":{"raw":{"language":"json"}}},"url":{"raw":"{{swapiUrl}}/vehicles/{{vehicleId}}","host":["{{swapiUrl}}"],"path":["vehicles","{{vehicleId}}"]}},"response":[]},{"name":"nonExistentVehicle","event":[{"listen":"test","script":{"exec":["// Negative test to confirm if a invalid value put in then it gives 404\r","\r","const response = pm.response.json();\r","\r","//Check status\r","pm.test(\"Test One - Confirm Status code is  404\", () => {\r","    pm.response.to.have.status(404);\r","});\r","\r","\r","// Confirm response valid and shows as not found\r","pm.test(\"Test Two - response must be valid and have a body\",  () => {\r","     pm.response.to.be.notFound;\r","     pm.response.to.be.withBody;\r","     pm.response.to.be.json;\r","});\r","\r","// test to confirm response body is \"Not found\"\r","pm.test(\"Test Three - Status should be Not Found\", () => {\r","    pm.expect(response.detail).eql(\"Not found\");\r","});\r","\r","// Show response value in Console\r","console.log(response['detail']);"],"type":"text/javascript","id":"ddc3de41-40dc-4fe2-a5e1-d8913cd8a306"}}],"id":"d00112b7-60ce-4878-8654-d381513f4735","protocolProfileBehavior":{"disableBodyPruning":true},"request":{"method":"GET","header":[],"url":{"raw":"{{swapiUrl}}/vehicles/:id/","host":["{{swapiUrl}}"],"path":["vehicles",":id",""],"variable":[{"id":"de8bac5b-1a0c-42b6-be00-b85d8e462315","key":"id","value":"aled"}]}},"response":[]},{"name":"allPlanets","event":[{"listen":"test","script":{"exec":["// Confirm get 200\r","pm.test(\"Test One - Confirm Status code is 200\", () => {\r","    pm.response.to.have.status(200);\r","});\r","\r","// Confirm response valid\r","pm.test(\"Test Two - response must be valid and have a body\",  () => {\r","     pm.response.to.be.ok;\r","     pm.response.to.be.withBody;\r","     pm.response.to.be.json;\r","});\r","\r","const response = pm.response.json();\r","\r","pm.test(\"Test Three - Body contains string where expected\",() => {\r","  pm.expect(pm.response.text()).to.include(\"name\");\r","  pm.expect(pm.response.text()).to.include(\"population\");\r","});\r","\r","// Check the properties of the response\r","pm.test(\"Test Four - The response has all properties\", () => {\r","    //parse the response json and test three properties\r","\r","    pm.expect(response.name).to.be.a('string');\r","    pm.expect(response.residents).to.be.an(\"array\");\r","    pm.expect(response.films).to.be.an(\"array\");\r","});\r","\r","// Check for specific values in the Object for this ID\r","pm.test(\"Test Five - Check for specific values in the Object for this ID\", () => {\r","  const expectedObject = {\r","    \"surface_water\": \"1\",\r","    \"population\": \"200000\",\r","  };\r","  pm.expect(pm.response.json()).to.deep.include(expectedObject);\r","});\r"," \r",""],"type":"text/javascript","id":"e8a08dc4-05e8-4512-afae-eb7e80dbb108"}}],"id":"8b447483-4bdf-4d72-a083-c09e2a8021a3","protocolProfileBehavior":{"disableBodyPruning":true},"request":{"method":"GET","header":[],"url":{"raw":"{{swapiUrl}}/planets/1/","host":["{{swapiUrl}}"],"path":["planets","1",""]}},"response":[]}],"variable":[{"id":"9534abd9-f95a-40d4-9aeb-646057d578ff","key":"swapiurl","value":"https"}]}